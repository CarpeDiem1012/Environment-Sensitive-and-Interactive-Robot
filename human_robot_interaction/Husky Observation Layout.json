{
  "configById": {
    "ImageViewPanel!1w74qb5": {
      "cameraTopic": "/realsense/color/image_raw",
      "enabledMarkerTopics": [],
      "mode": "fit",
      "pan": {
        "x": 0,
        "y": 0
      },
      "rotation": 0,
      "synchronize": false,
      "transformMarkers": false,
      "zoom": 1
    },
    "Teleop!1ocyqvw": {
      "topic": "/husky_velocity_controller/cmd_vel",
      "publishRate": 1,
      "upButton": {
        "field": "linear-x",
        "value": 1
      },
      "downButton": {
        "field": "linear-x",
        "value": -1
      },
      "leftButton": {
        "field": "angular-z",
        "value": 1
      },
      "rightButton": {
        "field": "angular-z",
        "value": -1
      }
    },
    "ImageViewPanel!3mnp456": {
      "cameraTopic": "/camera_1/image_raw",
      "enabledMarkerTopics": [],
      "mode": "fit",
      "pan": {
        "x": 0,
        "y": 0
      },
      "rotation": 0,
      "synchronize": false,
      "transformMarkers": false,
      "zoom": 1
    },
    "RawMessages!os6rgs": {
      "autoExpandMode": "auto",
      "diffEnabled": false,
      "diffMethod": "custom",
      "diffTopicPath": "",
      "showFullMessageForDiff": false,
      "topicPath": "/human_robot_interaction_node/error_message"
    },
    "Publish!1dzdy54": {
      "topicName": "/human_robot_interaction_node/error_message",
      "datatype": "std_msgs/String",
      "buttonText": "Publish",
      "buttonTooltip": "",
      "buttonColor": "#00A871",
      "advancedView": true,
      "value": "{\n  \"data\": \"help\"\n}"
    }
  },
  "globalVariables": {},
  "userNodes": {
    "62e3a805-bf40-4068-85a1-28d4423a90c8": {
      "sourceCode": "// The ./types module provides helper types for your Input events and messages.\nimport { Input, Message } from \"./types\";\n\n// Your node can output well-known message types, any of your custom message types, or\n// complete custom message types.\n//\n// Use `Message` to access your data source types or well-known types:\n// type Twist = Message<\"geometry_msgs/Twist\">;\n//\n// Conventionally, it's common to make a _type alias_ for your node's output type\n// and use that type name as the return type for your node function.\n// Here we've called the type `Output` but you can pick any type name.\ntype Output = {\n  hello: string;\n};\n\n// These are the topics your node \"subscribes\" to. Studio will invoke your node function\n// when any message is received on one of these topics.\nexport const inputs = [\"/input/topic\"];\n\n// Any output your node produces is \"published\" to this topic. Published messages are only visible within Studio, not to your original data source.\nexport const output = \"/studio_node/output_topic\";\n\n// This function is called with messages from your input topics.\n// The first argument is an event with the topic, receive time, and message.\n// Use the `Input<...>` helper to get the correct event type for your input topic messages.\nexport default function node(event: Input<\"/input/topic\">): Output {\n  return {\n    hello: \"world!\",\n  };\n};",
      "name": "62e3a805"
    }
  },
  "linkedGlobalVariables": [],
  "playbackConfig": {
    "speed": 1,
    "messageOrder": "receiveTime"
  },
  "layout": {
    "direction": "row",
    "first": {
      "first": "ImageViewPanel!1w74qb5",
      "second": "Teleop!1ocyqvw",
      "direction": "column",
      "splitPercentage": 62.570462232243514
    },
    "second": {
      "first": "ImageViewPanel!3mnp456",
      "second": {
        "first": "RawMessages!os6rgs",
        "second": "Publish!1dzdy54",
        "direction": "row",
        "splitPercentage": 62.241887905604734
      },
      "direction": "column",
      "splitPercentage": 62.570462232243514
    },
    "splitPercentage": 52.54022246770719
  }
}